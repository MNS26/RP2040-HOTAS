#include "Commands.h"
#include "Common.h"
#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include "CRC.h"
#include "Wire.h"
#include <EEPROM.h>

// Buttons
// D E I HAT HAT HAT HAT Scroll Scroll RB LB
// Axis
// ????
#define I2C_SDA 0
#define I2C_SCL 1
#define BUTTON1 2
#define BUTTON2 3
#define BUTTON3 4
#define HAT1_1 5
#define HAT1_2 6
#define HAT1_3 7
#define HAT1_4 8
#define SCROLL_1 9
#define SCROLL_2 10
#define LMB 12
#define RMB 11
#define MUX_EN 20
#define MUX_S1 21
#define MUX_S2 22
#define MUX_S3 A0
#define MUX_S4 A1
#define MUX_SIG A2

#define WS2812_PIN NULL

#define EXT_NUM_PIXELS 3

//int i2cADDR = calcCRC8((uint8_t*)rp2040.getChipID(), sizeof(rp2040.getChipID()));
int i2cADDR = 21;
uint8_t ADCresolution = 11;
// pin ids used for reading
uint8_t digitalPinIds[32] = {2,3,4,5,6,7,8,9,10,11,12,20,21,22,26,27}; 

// pin modes (INPUT, OUTPUT, INPUT_PULLUP, INPUT_PULLDOWN, OUTPUT_2MA, OUTPUT_4MA, OUTPUT_8MA, OUTPUT_12MA)
uint8_t digitalModePins[32] = {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4};

uint8_t analogPinIds[32] = {28};
uint8_t analogModePins[32] = {0};

// order is: EN, S0,S1,S2,S3,SIG
uint8_t muxPins[5][6] = {{20,21,22,26,27,28}};
uint8_t digitalPinCount = 0;
uint8_t analogPinCount = 0;
uint8_t muxCount = 0;

//Adafruit_NeoPixel ext_pixel(EXT_NUM_PIXELS, WS2812_PIN);
volatile RGBW led;

uint8_t i2cDataSize = 0;
uint8_t i2cDataBuf[64];

void receive(int len);
void request();
uint16_t readMuxChannel(uint8_t channel);


/////////////////////////////////////////////////
// primary core used ONLY for communications   //
// secondary core used for general tasks       //
/////////////////////////////////////////////////

void readEEPROM() {}
void writeEEPROM() {}
void commitEEPROM() {}

// Reads the analog pin
// muxId is 0 its reading a analog pin directly
// otherwise muxId is used to get the pins from the array for that mux
// and channel is used to select the pin instead
template <typename T> T readAxis(uint8_t muxId, uint8_t channel) {
  T value = 0;
  if(muxId>0) {

//    digitalWrite(muxPins[muxId][0], HIGH);
//    digitalWrite(muxPins[muxId][1], ((channel >> 0) & 0x01));
//    digitalWrite(muxPins[muxId][2], ((channel >> 1) & 0x01));
//    digitalWrite(muxPins[muxId][3], ((channel >> 2) & 0x01));
//    digitalWrite(muxPins[muxId][4], ((channel >> 3) & 0x01));
//    digitalWrite(muxPins[muxId][0], LOW);
//    value = analogRead(muxPins[muxId][5])
//    digitalWrite(muxPins[muxId][0], HIGH);
    digitalWrite(MUX_S1, ((channel >> 0) & 0x01));
    digitalWrite(MUX_S2, ((channel >> 1) & 0x01));
    digitalWrite(MUX_S3, ((channel >> 2) & 0x01));
    digitalWrite(MUX_S4, ((channel >> 3) & 0x01));
    digitalWrite(MUX_EN, LOW);
    delay(1);
    value = analogRead(MUX_SIG);
    digitalWrite(MUX_EN, HIGH);
  } else {
    value = analogRead(channel);
  }
  return (T)value;
}

uint8_t readButton(uint8_t button) {
  bool isPressed = 0;
  switch (button) {
    case Button1:
    { isPressed = digitalRead(BUTTON1); break; }
    case Button2:
    { isPressed = digitalRead(BUTTON2); break; }
    case Button3:
    { isPressed = digitalRead(BUTTON3); break; }
    case Button4:
    { isPressed = digitalRead(HAT1_1); break; }
    case Button5:
    { isPressed = digitalRead(HAT1_2); break; }
    case Button6:
    { isPressed = digitalRead(HAT1_3); break; }
    case Button7:
    { isPressed = digitalRead(HAT1_4); break; }
    case Button8:
    { isPressed = digitalRead(SCROLL_1); break; }
    case Button9:
    { isPressed = digitalRead(SCROLL_2); break; }
    case Button10:
    { isPressed = digitalRead(LMB); break; }
    case Button11:
    { isPressed = digitalRead(RMB); break; }
    case Button12:
    { break; }
    case Button13:
    { break; }
    case Button14:
    { break; }
    case Button15:
    { break; }
    case Button16:
    { break; }
    case Button17:
    { break; }
    case Button18:
    { break; }
    case Button19:
    { break; }
    case Button20:
    { break; }
    case Button21:
    { break; }
    case Button22:
    { break; }
    case Button23:
    { break; }
    case Button24:
    { break; }
    case Button25:
    { break; }
    case Button26:
    { break; }
    default: break;
  }
  // This is since we default our pins high... we pull low when pressed. (this is oposite to how default true/fasle is)
  return !isPressed;
}

// function that executes whenever data is received from master
// this function is registered as an event, see setup()
void receive(int len) {
  uint8_t command = Wire.read();
  switch (command) {
    case SetLed: {
      uint8_t id = Wire.read();
      led.raw = Wire.read()|(Wire.read()<<8)|(Wire.read()<<16)|(Wire.read()<<24);
      //ext_pixel.setPixelColor(id, led.R, led.G, led.B);
      break;
    }
    case GetLed: {
      uint8_t id = Wire.read();
      //((uint32_t*)i2cDataBuf)[0] = ext_pixel.getPixelColor(id);
      //i2cBuffUsed += sizeof(uint32_t);
      break; 
    }
    case GetAxis: {
      uint8_t id = Wire.read();
      ((uint16_t*)i2cDataBuf)[0] = readAxis<uint16_t>(0,id);
      i2cDataSize = sizeof(uint16_t);
      break;
    }
    case GetMuxAxis: {
      uint8_t mux = Wire.read();
      uint8_t id = Wire.read();
      ((uint16_t*)i2cDataBuf)[0] = readAxis<uint16_t>(mux, id);
      i2cDataSize = sizeof(uint16_t);
      break;
    }
    case GetButton: {
      uint8_t id = Wire.read();
      i2cDataBuf[0] = readButton(id);
      i2cDataSize = sizeof(uint8_t);
      break;
    }
    case GetMuxButton: {
      uint8_t mux = Wire.read();
      uint8_t id = Wire.read();
      i2cDataBuf[0] = readButton(id);
      i2cDataSize = sizeof(uint8_t);
      break;
    }

    case SetConfig: {
      uint16_t configCommand = Wire.read()|(Wire.read()<<8);
      uint8_t id = Wire.read();
      switch (configCommand) {
        case ConfigUpdate: {
          break;
        }
        case SetI2cId: {
          uint8_t id = Wire.read();
          break;
        }
        case SetAnalogResolution: {
          analogReadResolution(Wire.read());
          break;
        }
        case SetButtonPin: {
          uint8_t id = Wire.read();
          break;
        }
        case SetAxisPin: {
          uint8_t id = Wire.read();
          break;
        }
        case SetHatPins: {
          uint8_t id = Wire.read();
          break;
        }
        case SetMuxPins: {
          uint8_t id = Wire.read();
          break;
        }
        case SetButtonCount: {
          uint8_t id = Wire.read();
          break;
        }
        case SetHatCount: {
          uint8_t id = Wire.read();
          break;
        }
        case SetAxisCount: {
          uint8_t id = Wire.read();
          break;
        }
        case SetMuxCount: {
          uint8_t id = Wire.read();
          break;
        }
        default:
          break;
      }
      break;
    }
    case GetConfig: {
      uint16_t configCommand = Wire.read()|(Wire.read()<<8);
      switch (configCommand) {
        case GetI2cId: {
          break;
        }
        case GetAnalogResolution: {
          break;
        }
        case GetButtonPin: {
          uint8_t id = Wire.read();
          break;
        }
        case GetAxisPin: {
          uint8_t id = Wire.read();
          break;
        }
        case GetHatPins: {
          uint8_t id = Wire.read();
          break;
        }
        case GetMuxPins: {
          uint8_t id = Wire.read();
          break;
        }
        case GetButtonCount: {
          uint8_t id = Wire.read();
          break;
        }
        case GetHatCount: {
          uint8_t id = Wire.read();
          break;
        }
        case GetAxisCount: {
          uint8_t id = Wire.read();
          break;
        }
        case GetMuxCount: {
          uint8_t id = Wire.read();
          break;
        }
        default:
          break;
      }
      break;
    }
    default:
    break;
  }

}

// function that executes whenever data is received from master
// Called when the I2C slave is read from
void request() {
  Wire.write(i2cDataBuf, i2cDataSize);
}

void setup() {}
void loop() {}


void setup1() {
  
// This changes the SMPS to be less efficient but also less noisy
#if defined(ARDUINO_RASPBERRY_PI_PICO)||defined(ARDUINO_RASPBERRY_PI_PICO_W) 
  pinMode(23, OUTPUT);
  digitalWrite(23, HIGH);
#endif
  // since its not actually a eeprom we MUST only write to it when we REALLY have to
  //EEPROM.begin(128);
  ////////////////////////////
  //     EEPROM layout:     //
  ////////////////////////////
  // (1)  i2c address       //
  // (1)  adc resolution    //
  // (1)  digital pin count //
  // (1)  analog pin count  //
  // (1)  mux count         //
  // (1)  rgb led count     //
  // (1)  rgb led pin       //
  // (32) digital pins      //
  // (32) analog pins       //
  // (32) mux pins          //
  ////////////////////////////




  //ext_pixel.begin();

  analogReadResolution(ADCresolution);

  //for (uint8_t i = 0; i <digitalPinCount; i++) {
  //  pinMode(digitalPinIds[i],digitalModePins[i]);
  //}
  //for (uint8_t i = 0; i <analogPinCount; i++) {
  //  pinMode(analogPinIds[i],  analogModePins[i]);
  //}


  pinMode(BUTTON1, OUTPUT_2MA);
  pinMode(BUTTON2, OUTPUT_2MA);
  pinMode(BUTTON3, OUTPUT_2MA);
  pinMode(HAT1_1, OUTPUT_2MA);
  pinMode(HAT1_2, OUTPUT_2MA);
  pinMode(HAT1_3, OUTPUT_2MA);
  pinMode(HAT1_4, OUTPUT_2MA);
  pinMode(SCROLL_1, OUTPUT_2MA);
  pinMode(SCROLL_2, OUTPUT_2MA);
  pinMode(LMB, OUTPUT_2MA);
  pinMode(RMB, OUTPUT_2MA);
  pinMode(MUX_EN, OUTPUT_2MA);
  pinMode(MUX_S1, OUTPUT_2MA);
  pinMode(MUX_S2, OUTPUT_2MA);
  pinMode(MUX_S3, OUTPUT_2MA);
  pinMode(MUX_S4, OUTPUT_2MA);
  pinMode(MUX_SIG, INPUT);
  
  digitalWrite(BUTTON1, HIGH);
  digitalWrite(BUTTON2, HIGH);
  digitalWrite(BUTTON3, HIGH);
  digitalWrite(HAT1_1, HIGH);
  digitalWrite(HAT1_2, HIGH);
  digitalWrite(HAT1_3, HIGH);
  digitalWrite(HAT1_4, HIGH);
  digitalWrite(SCROLL_1, HIGH);
  digitalWrite(SCROLL_2, HIGH);
  digitalWrite(LMB, HIGH);
  digitalWrite(RMB, HIGH);
  digitalWrite(MUX_EN, HIGH);
  digitalWrite(MUX_S1, LOW);
  digitalWrite(MUX_S2, LOW);
  digitalWrite(MUX_S3, LOW);
  digitalWrite(MUX_S4, LOW);

  //pinMode(I2C_SDA, OUTPUT_2MA);
  //pinMode(I2C_SCL, OUTPUT_2MA);
  //digitalWrite(I2C_SDA, HIGH);
  //digitalWrite(I2C_SCL, HIGH);

  Wire.setSDA(I2C_SDA);
  Wire.setSCL(I2C_SCL);
  Wire.setTimeout(100, true);
  Wire.begin(i2cADDR);
  Wire.onReceive(receive);
  Wire.onRequest(request);

}


void loop1() {

}
