// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// throttle //
// -------- //

#define throttle_wrap_target 0
#define throttle_wrap 3

static const uint16_t throttle_program_instructions[] = {
            //     .wrap_target
    0xa022, //  0: mov    x, y                       
    0x3d21, //  1: wait   0 pin, 1        side 1 [5] 
    0x35a1, //  2: wait   1 pin, 1        side 0 [5] 
    0x0001, //  3: jmp    1                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program throttle_program = {
    .instructions = throttle_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config throttle_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + throttle_wrap_target, offset + throttle_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "pico/stdlib.h"
#include "hardware/pio.h"
static inline void throttle_program_init(PIO pio, uint sm, uint offset, uint DataOut, uint ClockOut, uint DataIn, uint ClockIn) {
    // Configure state machine
    pio_sm_config config = throttle_program_get_default_config(offset);
    sm_config_set_in_shift(&config, false, true, 28);
    sm_config_set_out_shift(&config, false, true, 31);
    // Map pins
    sm_config_set_out_pins(&config, DataOut, 1);
    sm_config_set_set_pins(&config, DataOut, 2);
    sm_config_set_in_pins(&config, DataIn);
    sm_config_set_sideset_pins(&config, ClockOut);
    // Set pin directions
    pio_sm_set_consecutive_pindirs(pio, sm, DataOut, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, ClockOut, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, DataIn, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, ClockIn, 1, false);
    // Side-set options
    sm_config_set_sideset(&config, 1, true, false);  // 1 side-set pin, optional, enable side-set
    // Set variable for loop 
    pio_sm_put(pio, sm, 55);
    pio_sm_exec(pio, sm, pio_encode_pull(false, false));
    pio_sm_exec(pio, sm, pio_encode_mov(pio_y,pio_osr));
    // Initialize state machine
    pio_sm_init(pio, sm, offset, &config);
    pio_sm_set_enabled(pio, sm, true);
}

#endif
